export function isEmailAddress(str: string): boolean {
    if (!str) return false;
    // 正規表現を使ってメールアドレスの形式をチェックする
    const emailRegex = /^[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9!#$%&'*+/=?^_`{|}~\-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~\-]+)*$/;

    if (!emailRegex.test(str)) return false;
    const [localPart, domainPart] = str.split("@");
    // ローカルパートの長さは最大64文字
    if (localPart.length > 64) return false;

    // ドメイン部分の長さは最大253文字
    if (domainPart.length > 253) return false;

    // 全体の長さは最大254文字
    if (str.length > 254) return false;

    return true;
}
isEmailAddress("a@012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901");

// またメールアドレスの正規表現として一般的には何を使うのが良いと考えられるか調べて記述しなさい。
// 下記のものはHTMLの標準仕様を定めるWHATWGの正規表現で各ブラウザのデフォルトの<input type="email" />のバリデーションと同じものであるため実用的なものである。
// /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
// またRFC 5322準拠のものとしては下記のものが見つかった。
// /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/